# Default values for opendcs.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/opendcs
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
namespace: default

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

lrgs:
    enabled: true
    storageClass:
    storageSize: 30Gi
    replicas: 1
    configMap: ""
    conf:
      archiveDir: "$LRGSHOME/archive"
      numDayFiles: 31
      enableDdsRecv: true
      ddsRecvConfig: "/config/ddsrecv.conf"
      enableDrgsRecv: false
      drgsRecvConfig: "/config/drgsconf.xml"
      htmlStatusSeconds: 10
      ddsListenPort: 16003
      ddsRequireAuth: false
      # this prevents the LRGS from failing to respond if no data is available
      noTimeout: true

postgresql:
  enabled: true
  auth:
    database: dcs
    username: dcs_owner
    password: "newUserPassword123"
    postgresPassword: "newPostgresPassword123"
  primary:
    initdb:
      scripts:
        00_owner.sql: |
          alter user dcs_owner createrole;

  passwordUpdateJob:
    enabled: true

apps:
  routingscheduler:
    enabled: true
  compdepends:
    enabled: false
  compproc:
    enabled: false

  user:
    username: dcs_proc
    password: dcs_proc

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 16003

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  tcpSocket:
     port: 16003
  initialDelaySeconds: 15
  periodSeconds: 10
readinessProbe:
  tcpSocket:
    port: 16003
  initialDelaySeconds: 15
  periodSeconds: 10

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
